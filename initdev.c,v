head	1.16;
access;
symbols;
locks
	root:1.16; strict;
comment	@ * @;


1.16
date	2022.08.14.18.58.18;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2022.08.13.17.36.33;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2022.08.13.17.32.41;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2022.08.13.14.55.58;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2022.08.12.19.33.02;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2022.08.11.11.55.07;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2022.08.11.10.49.32;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2022.08.11.10.38.38;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2022.08.09.16.12.33;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2022.07.25.15.24.09;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2022.07.25.15.15.05;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2022.07.25.15.13.44;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2022.07.25.14.30.10;	author amanp;	state Exp;
branches;
next	1.3;

1.3
date	2022.07.25.14.27.04;	author amanp;	state Exp;
branches;
next	1.2;

1.2
date	2022.07.25.14.22.46;	author amanp;	state Exp;
branches;
next	1.1;

1.1
date	2022.07.25.13.25.54;	author amanp;	state Exp;
branches;
next	;


desc
@1st exicutable function of the driver
@


1.16
log
@*** empty log message ***
@
text
@#include "headers.h"
#include "declarations.h"
#include "fileopr.h"

int majorNo, minorNo, nod;
int deviceSize, dataSize, registerSize, noofRegisters;
dev_t devid, devno;
Dev *dev;

module_param(nod, int, S_IRUGO);
module_param(registerSize, int, S_IRUGO);
module_param(noofRegisters, int, S_IRUGO);
module_param(deviceSize, int, S_IRUGO);

static int __init initDev(void)
{

	int ret,idx;
	printk(KERN_INFO "Hellow Kernal.....I am Aman\n");
        
        majorNo = MAJORNO;
        minorNo = MINORNO;
//	nod = NOD;
//      deviceSize = DEVICESIZE;
       	dataSize = DATASIZE;
//      registerSize = REGISTERSIZE;
//      noofRegisters = NOOFREGISTER;

	//1. Register Device Driver into the Kernel
	//majorNo = register_chrdev(MAJORNO , DEVNAME , &fops);
	if(majorNo >0 )                //  used all ready loadded kernel
	{
		ret = register_chrdev_region(devno, 1, DEVNAME);
	}
	else                          // load driver to kernel 
		ret = alloc_chrdev_region(&devid, minorNo, nod, DEVNAME); 
        if(ret == -1)
	{
           printk(KERN_ERR "ERROR: Device Registration Failled. \n");
	   goto OUT;
	}	
	majorNo = MAJOR(devid);
	minorNo = MINOR(devid);
	printk(KERN_INFO "Device Driver registration successful...MajorNo:%d and MinorNo:%d\n",majorNo, minorNo);
	
	dev = (Dev *)kmalloc(sizeof(Dev)*nod , GFP_KERNEL);        // alocate spaces for nod devices
	if(!dev)
	{
		printk(KERN_ERR "ERROR: kmalloc() Failled. \n");
		goto OUT;
	}
        memset(dev, '\0', sizeof(Dev)*nod);

	for(idx = 0; idx<nod ; ++idx)
	{
        	cdev_init(&dev[idx].c_dev, &fops);                // initialize cdev
        	dev[idx].c_dev.ops = &fops;
        	dev[idx].deviceSize = deviceSize;
        	dev[idx].dataSize = dataSize;
        	dev[idx].registerSize = registerSize;
		dev[idx].noofRegisters = noofRegisters;
		devno = MKDEV(majorNo, idx);
//        	sema_init(&dev[idx].sem, 1);                         //  initialize shemaphore
//              init_completion(&dev[idx].cmplsn);
                init_waitqueue_head(&dev[idx].myqueue);
		ret = cdev_add(&dev[idx].c_dev, devno, nod);        //  added cdev to device table
        	if(ret == -1)
        	{
           		printk(KERN_ERR "ERROR: cdev_add() Failled. \n");
           		goto OUT;
        	}
		majorNo = MAJOR(dev[idx].c_dev.dev);
		minorNo = MINOR(dev[idx].c_dev.dev);
		printk(KERN_INFO "Device Driver registration successful...MajorNo:%d and MinorNo:%d\n",majorNo, minorNo);
        }
	return 0;
OUT:
	return -1;
}

module_init(initDev);

@


1.15
log
@*** empty log message ***
@
text
@d64 2
a65 1
                init_completion(&dev[idx].cmplsn);
@


1.14
log
@*** empty log message ***
@
text
@d63 1
a63 1
i//        	sema_init(&dev[idx].sem, 1);                         //  initialize shemaphore
@


1.13
log
@*** empty log message ***
@
text
@d63 2
a64 1
        	sema_init(&dev[idx].sem, 1);                         //  initialize shemaphore
@


1.12
log
@forget add details of sucll in device table
@
text
@d56 1
a56 1
        	cdev_init(&dev[idx].c_dev, &fops);         // initialize cdev
d63 2
a64 1
        	ret = cdev_add(&dev[idx].c_dev, devno, nod);        //  added cdev to device table
@


1.11
log
@*** empty log message ***
@
text
@d58 4
@


1.10
log
@typo
@
text
@d11 3
d24 1
a24 1
        deviceSize = DEVICESIZE;
d26 2
a27 2
       	registerSize = REGISTERSIZE;
       	noofRegisters = NOOFREGISTER;
@


1.9
log
@devise registration for nod devices
@
text
@d53 2
a54 2
        	cdev_init(&dev[idx]->c_dev, &fops);         // initialize cdev
        	dev[idx]->c_dev.ops = &fops;
d56 1
a56 1
        	ret = cdev_add(&dev[idx]->c_dev, devno, nod);        //  added cdev to device table
d62 2
a63 2
		majorNo = MAJOR(dev->c_dev.dev);
		minorNo = MINOR(dev->c_dev.dev);
@


1.8
log
@*** empty log message ***
@
text
@d10 2
d15 1
a15 1
	int ret;
d20 1
a20 1
	nod = NOD;
d43 1
a43 1
	dev = (Dev *)kmalloc(sizeof(Dev), GFP_KERNEL);
d49 1
a49 1
        memset(dev, '\0', sizeof(Dev));
d51 14
a64 7
        cdev_init(&dev->c_dev, &fops);         // initialize cdev
        dev->c_dev.ops = &fops;
        ret = cdev_add(&dev->c_dev, devid, nod);        //  added cdev to device table
        if(ret == -1)
        {
           printk(KERN_ERR "ERROR: cdev_add() Failled. \n");
           goto OUT;
a65 5

	majorNo = MAJOR(dev->c_dev.dev);
	minorNo = MINOR(dev->c_dev.dev);
	printk(KERN_INFO "Device Driver registration successful...MajorNo:%d and MinorNo:%d\n",majorNo, minorNo);

@


1.7
log
@fetching major and minor fro dev->c_dev.dev
@
text
@d2 1
a3 1
#include "declarations.h"
@


1.6
log
@*** empty log message ***
@
text
@d58 4
@


1.5
log
@*** empty log message ***
@
text
@d51 1
a51 1
        ret == cdev_add(&dev->c_dev, devid, nod);        //  added cdev to device table
@


1.4
log
@typo error
@
text
@d49 8
a56 1
	cdev_init(&dev->c_dev, &fops);
@


1.3
log
@typo error
@
text
@d41 1
a41 1
	dev = (Dev *)kmalloc(dev, '\0', sizeof(Dev));
d49 1
a49 1
	cdev_init(dev->cdev, &fops);
@


1.2
log
@call cdev_init to initialize cdev to access hardware
@
text
@d49 1
a49 1
	cdev_init($dev->cdev, &fops);
@


1.1
log
@Initial revision
@
text
@d8 1
d41 10
@
