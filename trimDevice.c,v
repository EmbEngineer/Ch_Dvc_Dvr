head	1.7;
access;
symbols;
locks
	root:1.7; strict;
comment	@ * @;


1.7
date	2022.08.13.17.35.39;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2022.08.13.15.57.05;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2022.08.13.14.55.59;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2022.08.13.00.15.25;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2022.08.13.00.03.19;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2022.08.12.23.58.54;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2022.08.11.11.55.09;	author root;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@#include "headers.h"
#include "declarations.h"

int trimDevice(Dev *devp)
{
	int i;
	Qset *last, *slast;
#ifdef DEBUG
        printk(KERN_INFO "%s: Begin\n",__func__);
#endif  
        if(!devp)
	{
        	printk(KERN_ERR "%s:Device Not found for opening \n",__func__);
	        goto OUT;
	}
        if(!devp->first)
	{
        	printk(KERN_INFO "%s:Nothing to Trim \n",__func__);
	        goto RET;
	}

/*	if(down_interruptible(&devp->sem))         // lock
	{
		return -ERESTARTSYS;
	}*/
	while(devp->first)  // trim start from here 
	{
		slast = last = devp->first;

        	while(last->next)
		{
		        slast = last;
			last = last->next;
	        }
		if(last->data)
		{
			for(i= devp->noofRegisters-1; i>=0 ; i--)
   			{
				if(last->data[i])
				{
					kfree(last->data[i]);
					last->data[i] = NULL;
				}
			}
			kfree(last->data);
			last->data = NULL;
		}
		kfree(last);
		if(last == slast)
			devp->first = NULL;
		else
			slast->next = NULL;
	}
//	up(&devp->sem);      // unlock
RET:
#ifdef DEBUG
        printk(KERN_INFO "%s: End\n",__func__);
#endif
	return 0;
OUT:
#ifdef DEBUG
        printk(KERN_ERR "%s: ERROR\n",__func__);
#endif
	return -1;
}
@


1.6
log
@*** empty log message ***
@
text
@d22 1
a22 1
	if(down_interruptible(&devp->sem))         // lock
d25 1
a25 1
	}
d54 1
a54 1
	up(&devp->sem);      // unlock
@


1.5
log
@*** empty log message ***
@
text
@d22 1
a22 1
	if(down_interruptable(&devp->sem))         // lock
@


1.4
log
@*** empty log message ***
@
text
@d22 5
a26 1
	while(devp->first)
d54 1
@


1.3
log
@typo
@
text
@d13 1
a13 1
        	printk(KERN_INFO "%s:Device Not found for opening \n",__func__);
d19 1
a19 1
	        goto OUT;
d50 1
a50 1

d57 1
a57 1
        printk(KERN_INFO "%s: ERROR\n",__func__);
@


1.2
log
@implement trim
@
text
@d7 1
a7 1
	Qset *last, slast;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
int trimDevice(Dev *ldev)
d6 2
d11 10
d22 28
d55 5
@
