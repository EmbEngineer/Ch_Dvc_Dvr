head	1.16;
access;
symbols;
locks
	root:1.16; strict;
comment	@ * @;


1.16
date	2022.08.22.18.35.49;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2022.08.22.18.34.31;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2022.08.22.18.32.58;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2022.08.12.22.04.42;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2022.08.12.20.58.11;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2022.08.12.20.35.25;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2022.08.12.20.25.54;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2022.08.12.20.19.48;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2022.08.12.20.15.43;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2022.08.12.20.11.45;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2022.08.12.19.54.52;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2022.08.11.20.27.27;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2022.08.11.20.21.29;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2022.08.11.20.19.23;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2022.08.11.20.17.27;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2022.08.11.20.14.12;	author root;	state Exp;
branches;
next	;


desc
@@


1.16
log
@*** empty log message ***
@
text
@#include "headers.h"
#include "declarations.h"

Qset* createScull(size_t size)
{
	int items, idx, noq, tmp;
        Qset *first, *last;

#ifdef DEBUG
        printk(KERN_INFO "%s: Begin\n",__func__);
#endif  

        printk(KERN_INFO "%s: registerSize :- %d\n",__func__,registerSize);
        printk(KERN_INFO "%s: noofRegisters :- %d\n",__func__,noofRegisters);
        printk(KERN_INFO "%s: deviceSize :- %d\n",__func__,deviceSize);
        printk(KERN_INFO "%s: dataSize :- %d\n",__func__,dataSize);


	items = size / (noofRegisters * registerSize);       
       	if(size % (noofRegisters * registerSize))
         	items++;

        first = last = (Qset *)kmalloc(sizeof(Qset), GFP_KERNEL);
        if(!last)
	{
        	printk(KERN_ERR "%s: ERROR: Kmalloc() failure.\n",__func__);
	        goto OUT;
	}
        memset(last, '\0', sizeof(Qset));
	
	for(idx =0 ; idx < items-1 ; idx++)
	{
                last->next = (Qset *)kmalloc(sizeof(Qset), GFP_KERNEL);
	        if(!last)
		{
        		printk(KERN_ERR "%s: ERROR: Kmalloc() failure.\n",__func__);
	        	goto OUT;
		}
	        last = last->next;
        	memset(last, '\0', sizeof(Qset));
	}

	last = first;
	for(idx = 0 ; idx < items ; idx++)
        {
                last->data = (void *)kmalloc(sizeof(void *)*noofRegisters, GFP_KERNEL);
	        if(!last->data)
		{
        		printk(KERN_ERR "%s: ERROR: Kmalloc() failure.\n",__func__);
	        	goto OUT;
		}
        	memset(last->data, '\0', sizeof(void *)*noofRegisters);
	        last = last->next;
	}
	
	noq = size/registerSize;
	if(size % registerSize)
		++noq;
	
	last = first;
	for(idx = tmp = 0; tmp < noq; tmp++)
	{
		last->data[idx] = kmalloc(registerSize, GFP_KERNEL);
		if(!last->data[idx])
		{
        		printk(KERN_ERR "%s: ERROR: Kmalloc() failure.\n",__func__);
	        	goto OUT;
		}
		if(idx == noofRegisters-1)
		{
			last = last->next;
			idx =0;
		}
		else
			++idx;
	}

#ifdef DEBUG
        printk(KERN_INFO "%s: End\n",__func__);
#endif
	return first;
OUT:
#ifdef DEBUG
        printk(KERN_INFO "%s: End\n",__func__);
#endif
	return 0;
}
@


1.15
log
@*** empty log message ***
@
text
@d13 4
a16 4
        printk(KERN_INFO "%s: registerSize :- %d\n",__func__,ldev->registerSize);
        printk(KERN_INFO "%s: noofRegisters :- %d\n",__func__,ldev->noofRegisters);
        printk(KERN_INFO "%s: deviceSize :- %d\n",__func__,ldev->deviceSize);
        printk(KERN_INFO "%s: dataSize :- %d\n",__func__,ldev->dataSize);
@


1.14
log
@*** empty log message ***
@
text
@d13 4
a16 4
        printk(KERN_INFO "%s: registerSize\n",__func__,ldev->registerSize);
        printk(KERN_INFO "%s: noofRegisters\n",__func__,ldev->noofRegisters);
        printk(KERN_INFO "%s: deviceSize\n",__func__,ldev->deviceSize);
        printk(KERN_INFO "%s: dataSize\n",__func__,ldev->dataSize);
@


1.13
log
@*** empty log message ***
@
text
@d12 7
a18 1
	
@


1.12
log
@*** empty log message ***
@
text
@a11 2

        printk(KERN_INFO "%s: noofRegisters :- %d  and registerSize %d \n",__func__,noofRegisters, registerSize);
a16 2
        printk(KERN_INFO "%s: Items :- %d size :- %ld\n",__func__, items, size);

a52 2

        printk(KERN_INFO "%s: noq :- %d registerSize :- %d\n",__func__, noq , registerSize);
a66 1
        		printk(KERN_INFO "%s: Only For testing\n",__func__);
@


1.11
log
@*** empty log message ***
@
text
@d63 1
a63 1
		last->data[idx] = (void *)kmalloc(registerSize, GFP_KERNEL);
@


1.10
log
@*** empty log message ***
@
text
@d19 1
a19 1
        printk(KERN_INFO "%s: Items :- %d size :- %d\n",__func__, items, size);
d73 1
@


1.9
log
@*** empty log message ***
@
text
@d50 1
a51 1
        	memset(last->data, '\0', sizeof(void *)*noofRegisters);
d58 2
@


1.8
log
@*** empty log message ***
@
text
@d50 1
a51 1
	        last = last->next;
@


1.7
log
@*** empty log message ***
@
text
@d19 1
a19 1
        printk(KERN_INFO "%s: Items :- %d\n",__func__, items);
@


1.6
log
@*** empty log message ***
@
text
@d13 2
d19 3
a21 2
      //  first = last = (Qset *)kmalloc(sizeof(Qset), GFP_KERNEL);
        first = last = (Qset *)kmalloc(sizeof(Qset));
@


1.5
log
@typo
@
text
@d13 1
a13 1
	items = size/(noofRegisters * registerSize);       
d17 2
a18 1
        first = last = (Qset *)kmalloc(sizeof(Qset), GFP_KERNEL);
@


1.4
log
@*** empty log message ***
@
text
@d27 1
a27 1
                last->next = (Qset *)kmalloc(sizeof(Qset),GFP_KERNAL);
d40 1
a40 1
                last->data = (void *)kmalloc(sizeof(void *)*noofRegisters,GFP_KERNAL);
d57 1
a57 1
		last->data[idx] = (void *)kmalloc(registerSize,GFP_KERNAL);
@


1.3
log
@typo
@
text
@d17 1
a17 2
        first = last = (Qset *)kmalloc(sizeof(Qset));
       // first = last = (Qset *)kmalloc(sizeof(Qset),GFP_KERNAL);
@


1.2
log
@*** empty log message ***
@
text
@d17 2
a18 1
        first = last = (Qset *)kmalloc(sizeof(Qset),GFP_KERNAL);
@


1.1
log
@Initial revision
@
text
@a11 2
extern int registerSize;
extern int noofRegisters;
d17 1
a17 1
        first = last = (Qset *)kmalloc(sizeof(Qset), GFP_KERNAL);
d27 1
a27 1
                last->next = (Qset *)kmalloc(sizeof(Qset), GFP_KERNAL);
d40 1
a40 1
                last->data = (void *)kmalloc(sizeof(void *)*noofRegisters, GFP_KERNAL);
d57 1
a57 1
		last->data[idx] = (void *)kmalloc(registerSize, GFP_KERNAL);
@
